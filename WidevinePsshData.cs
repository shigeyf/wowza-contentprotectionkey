// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: widevine_pssh_data.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WowzaContentProtectionKey {

  /// <summary>Holder for reflection information generated from widevine_pssh_data.proto</summary>
  public static partial class WidevinePsshDataReflection {

    #region Descriptor
    /// <summary>File descriptor for widevine_pssh_data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WidevinePsshDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chh3aWRldmluZV9wc3NoX2RhdGEucHJvdG8SGVdvd3phQ29udGVudFByb3Rl",
            "Y3Rpb25LZXkinQIKEFdpZGV2aW5lUHNzaERhdGESSAoJYWxnb3JpdGhtGAEg",
            "ASgOMjUuV293emFDb250ZW50UHJvdGVjdGlvbktleS5XaWRldmluZVBzc2hE",
            "YXRhLkFsZ29yaXRobRIOCgZrZXlfaWQYAiADKAwSEAoIcHJvdmlkZXIYAyAB",
            "KAkSEgoKY29udGVudF9pZBgEIAEoDBIOCgZwb2xpY3kYBiABKAkSGwoTY3J5",
            "cHRvX3BlcmlvZF9pbmRleBgHIAEoDRIXCg9ncm91cGVkX2xpY2Vuc2UYCCAB",
            "KAwSGQoRcHJvdGVjdGlvbl9zY2hlbWUYCSABKA0iKAoJQWxnb3JpdGhtEg8K",
            "C1VORU5DUllQVEVEEAASCgoGQUVTQ1RSEAEiRwoOV2lkZXZpbmVIZWFkZXIS",
            "DwoHa2V5X2lkcxgCIAMoCRIQCghwcm92aWRlchgDIAEoCRISCgpjb250ZW50",
            "X2lkGAQgASgM"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WowzaContentProtectionKey.WidevinePsshData), global::WowzaContentProtectionKey.WidevinePsshData.Parser, new[]{ "Algorithm", "KeyId", "Provider", "ContentId", "Policy", "CryptoPeriodIndex", "GroupedLicense", "ProtectionScheme" }, null, new[]{ typeof(global::WowzaContentProtectionKey.WidevinePsshData.Types.Algorithm) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WowzaContentProtectionKey.WidevineHeader), global::WowzaContentProtectionKey.WidevineHeader.Parser, new[]{ "KeyIds", "Provider", "ContentId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WidevinePsshData : pb::IMessage<WidevinePsshData> {
    private static readonly pb::MessageParser<WidevinePsshData> _parser = new pb::MessageParser<WidevinePsshData>(() => new WidevinePsshData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WidevinePsshData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WowzaContentProtectionKey.WidevinePsshDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WidevinePsshData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WidevinePsshData(WidevinePsshData other) : this() {
      _hasBits0 = other._hasBits0;
      algorithm_ = other.algorithm_;
      keyId_ = other.keyId_.Clone();
      provider_ = other.provider_;
      contentId_ = other.contentId_;
      policy_ = other.policy_;
      cryptoPeriodIndex_ = other.cryptoPeriodIndex_;
      groupedLicense_ = other.groupedLicense_;
      protectionScheme_ = other.protectionScheme_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WidevinePsshData Clone() {
      return new WidevinePsshData(this);
    }

    /// <summary>Field number for the "algorithm" field.</summary>
    public const int AlgorithmFieldNumber = 1;
    private readonly static global::WowzaContentProtectionKey.WidevinePsshData.Types.Algorithm AlgorithmDefaultValue = global::WowzaContentProtectionKey.WidevinePsshData.Types.Algorithm.Unencrypted;

    private global::WowzaContentProtectionKey.WidevinePsshData.Types.Algorithm algorithm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WowzaContentProtectionKey.WidevinePsshData.Types.Algorithm Algorithm {
      get { if ((_hasBits0 & 1) != 0) { return algorithm_; } else { return AlgorithmDefaultValue; } }
      set {
        _hasBits0 |= 1;
        algorithm_ = value;
      }
    }
    /// <summary>Gets whether the "algorithm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAlgorithm {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "algorithm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAlgorithm() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "key_id" field.</summary>
    public const int KeyIdFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_keyId_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> keyId_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// Content Key Identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> KeyId {
      get { return keyId_; }
    }

    /// <summary>Field number for the "provider" field.</summary>
    public const int ProviderFieldNumber = 3;
    private readonly static string ProviderDefaultValue = "";

    private string provider_;
    /// <summary>
    /// Content provider name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Provider {
      get { return provider_ ?? ProviderDefaultValue; }
      set {
        provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "provider" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProvider {
      get { return provider_ != null; }
    }
    /// <summary>Clears the value of the "provider" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProvider() {
      provider_ = null;
    }

    /// <summary>Field number for the "content_id" field.</summary>
    public const int ContentIdFieldNumber = 4;
    private readonly static pb::ByteString ContentIdDefaultValue = pb::ByteString.Empty;

    private pb::ByteString contentId_;
    /// <summary>
    /// A content identifier, specified by content provider.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ContentId {
      get { return contentId_ ?? ContentIdDefaultValue; }
      set {
        contentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "content_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContentId {
      get { return contentId_ != null; }
    }
    /// <summary>Clears the value of the "content_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContentId() {
      contentId_ = null;
    }

    /// <summary>Field number for the "policy" field.</summary>
    public const int PolicyFieldNumber = 6;
    private readonly static string PolicyDefaultValue = "";

    private string policy_;
    /// <summary>
    /// The name of a registered policy to be used for this asset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Policy {
      get { return policy_ ?? PolicyDefaultValue; }
      set {
        policy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "policy" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPolicy {
      get { return policy_ != null; }
    }
    /// <summary>Clears the value of the "policy" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPolicy() {
      policy_ = null;
    }

    /// <summary>Field number for the "crypto_period_index" field.</summary>
    public const int CryptoPeriodIndexFieldNumber = 7;
    private readonly static uint CryptoPeriodIndexDefaultValue = 0;

    private uint cryptoPeriodIndex_;
    /// <summary>
    /// Crypto period index, for media using key rotation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CryptoPeriodIndex {
      get { if ((_hasBits0 & 2) != 0) { return cryptoPeriodIndex_; } else { return CryptoPeriodIndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cryptoPeriodIndex_ = value;
      }
    }
    /// <summary>Gets whether the "crypto_period_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCryptoPeriodIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "crypto_period_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCryptoPeriodIndex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "grouped_license" field.</summary>
    public const int GroupedLicenseFieldNumber = 8;
    private readonly static pb::ByteString GroupedLicenseDefaultValue = pb::ByteString.Empty;

    private pb::ByteString groupedLicense_;
    /// <summary>
    /// Optional protected context for group content. The grouped_license is a
    /// serialized SignedMessage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GroupedLicense {
      get { return groupedLicense_ ?? GroupedLicenseDefaultValue; }
      set {
        groupedLicense_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "grouped_license" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupedLicense {
      get { return groupedLicense_ != null; }
    }
    /// <summary>Clears the value of the "grouped_license" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupedLicense() {
      groupedLicense_ = null;
    }

    /// <summary>Field number for the "protection_scheme" field.</summary>
    public const int ProtectionSchemeFieldNumber = 9;
    private readonly static uint ProtectionSchemeDefaultValue = 0;

    private uint protectionScheme_;
    /// <summary>
    /// Protection scheme identifying the encryption algorithm. Represented as one
    /// of the following 4CC values: 'cenc' (AES-CTR), 'cbc1' (AES-CBC),
    /// 'cens' (AES-CTR subsample), 'cbcs' (AES-CBC subsample).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ProtectionScheme {
      get { if ((_hasBits0 & 4) != 0) { return protectionScheme_; } else { return ProtectionSchemeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        protectionScheme_ = value;
      }
    }
    /// <summary>Gets whether the "protection_scheme" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProtectionScheme {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "protection_scheme" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProtectionScheme() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WidevinePsshData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WidevinePsshData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Algorithm != other.Algorithm) return false;
      if(!keyId_.Equals(other.keyId_)) return false;
      if (Provider != other.Provider) return false;
      if (ContentId != other.ContentId) return false;
      if (Policy != other.Policy) return false;
      if (CryptoPeriodIndex != other.CryptoPeriodIndex) return false;
      if (GroupedLicense != other.GroupedLicense) return false;
      if (ProtectionScheme != other.ProtectionScheme) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAlgorithm) hash ^= Algorithm.GetHashCode();
      hash ^= keyId_.GetHashCode();
      if (HasProvider) hash ^= Provider.GetHashCode();
      if (HasContentId) hash ^= ContentId.GetHashCode();
      if (HasPolicy) hash ^= Policy.GetHashCode();
      if (HasCryptoPeriodIndex) hash ^= CryptoPeriodIndex.GetHashCode();
      if (HasGroupedLicense) hash ^= GroupedLicense.GetHashCode();
      if (HasProtectionScheme) hash ^= ProtectionScheme.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasAlgorithm) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Algorithm);
      }
      keyId_.WriteTo(output, _repeated_keyId_codec);
      if (HasProvider) {
        output.WriteRawTag(26);
        output.WriteString(Provider);
      }
      if (HasContentId) {
        output.WriteRawTag(34);
        output.WriteBytes(ContentId);
      }
      if (HasPolicy) {
        output.WriteRawTag(50);
        output.WriteString(Policy);
      }
      if (HasCryptoPeriodIndex) {
        output.WriteRawTag(56);
        output.WriteUInt32(CryptoPeriodIndex);
      }
      if (HasGroupedLicense) {
        output.WriteRawTag(66);
        output.WriteBytes(GroupedLicense);
      }
      if (HasProtectionScheme) {
        output.WriteRawTag(72);
        output.WriteUInt32(ProtectionScheme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAlgorithm) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Algorithm);
      }
      size += keyId_.CalculateSize(_repeated_keyId_codec);
      if (HasProvider) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
      }
      if (HasContentId) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContentId);
      }
      if (HasPolicy) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Policy);
      }
      if (HasCryptoPeriodIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CryptoPeriodIndex);
      }
      if (HasGroupedLicense) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GroupedLicense);
      }
      if (HasProtectionScheme) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProtectionScheme);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WidevinePsshData other) {
      if (other == null) {
        return;
      }
      if (other.HasAlgorithm) {
        Algorithm = other.Algorithm;
      }
      keyId_.Add(other.keyId_);
      if (other.HasProvider) {
        Provider = other.Provider;
      }
      if (other.HasContentId) {
        ContentId = other.ContentId;
      }
      if (other.HasPolicy) {
        Policy = other.Policy;
      }
      if (other.HasCryptoPeriodIndex) {
        CryptoPeriodIndex = other.CryptoPeriodIndex;
      }
      if (other.HasGroupedLicense) {
        GroupedLicense = other.GroupedLicense;
      }
      if (other.HasProtectionScheme) {
        ProtectionScheme = other.ProtectionScheme;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Algorithm = (global::WowzaContentProtectionKey.WidevinePsshData.Types.Algorithm) input.ReadEnum();
            break;
          }
          case 18: {
            keyId_.AddEntriesFrom(input, _repeated_keyId_codec);
            break;
          }
          case 26: {
            Provider = input.ReadString();
            break;
          }
          case 34: {
            ContentId = input.ReadBytes();
            break;
          }
          case 50: {
            Policy = input.ReadString();
            break;
          }
          case 56: {
            CryptoPeriodIndex = input.ReadUInt32();
            break;
          }
          case 66: {
            GroupedLicense = input.ReadBytes();
            break;
          }
          case 72: {
            ProtectionScheme = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WidevinePsshData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Algorithm {
        [pbr::OriginalName("UNENCRYPTED")] Unencrypted = 0,
        [pbr::OriginalName("AESCTR")] Aesctr = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// Derived from WidevinePsshData. The JSON format of this proto is used in
  /// Widevine HLS DRM signaling v1.
  /// We cannot build JSON from WidevinePsshData as |key_id| is required to be in
  /// hex format, while |bytes| type is translated to base64 by JSON formatter, so
  /// we have to use |string| type and do hex conversion in the code.
  /// </summary>
  public sealed partial class WidevineHeader : pb::IMessage<WidevineHeader> {
    private static readonly pb::MessageParser<WidevineHeader> _parser = new pb::MessageParser<WidevineHeader>(() => new WidevineHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WidevineHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WowzaContentProtectionKey.WidevinePsshDataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WidevineHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WidevineHeader(WidevineHeader other) : this() {
      keyIds_ = other.keyIds_.Clone();
      provider_ = other.provider_;
      contentId_ = other.contentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WidevineHeader Clone() {
      return new WidevineHeader(this);
    }

    /// <summary>Field number for the "key_ids" field.</summary>
    public const int KeyIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_keyIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> keyIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> KeyIds {
      get { return keyIds_; }
    }

    /// <summary>Field number for the "provider" field.</summary>
    public const int ProviderFieldNumber = 3;
    private readonly static string ProviderDefaultValue = "";

    private string provider_;
    /// <summary>
    /// Content provider name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Provider {
      get { return provider_ ?? ProviderDefaultValue; }
      set {
        provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "provider" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProvider {
      get { return provider_ != null; }
    }
    /// <summary>Clears the value of the "provider" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProvider() {
      provider_ = null;
    }

    /// <summary>Field number for the "content_id" field.</summary>
    public const int ContentIdFieldNumber = 4;
    private readonly static pb::ByteString ContentIdDefaultValue = pb::ByteString.Empty;

    private pb::ByteString contentId_;
    /// <summary>
    /// A content identifier, specified by content provider.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ContentId {
      get { return contentId_ ?? ContentIdDefaultValue; }
      set {
        contentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "content_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContentId {
      get { return contentId_ != null; }
    }
    /// <summary>Clears the value of the "content_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContentId() {
      contentId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WidevineHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WidevineHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keyIds_.Equals(other.keyIds_)) return false;
      if (Provider != other.Provider) return false;
      if (ContentId != other.ContentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keyIds_.GetHashCode();
      if (HasProvider) hash ^= Provider.GetHashCode();
      if (HasContentId) hash ^= ContentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keyIds_.WriteTo(output, _repeated_keyIds_codec);
      if (HasProvider) {
        output.WriteRawTag(26);
        output.WriteString(Provider);
      }
      if (HasContentId) {
        output.WriteRawTag(34);
        output.WriteBytes(ContentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keyIds_.CalculateSize(_repeated_keyIds_codec);
      if (HasProvider) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
      }
      if (HasContentId) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WidevineHeader other) {
      if (other == null) {
        return;
      }
      keyIds_.Add(other.keyIds_);
      if (other.HasProvider) {
        Provider = other.Provider;
      }
      if (other.HasContentId) {
        ContentId = other.ContentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            keyIds_.AddEntriesFrom(input, _repeated_keyIds_codec);
            break;
          }
          case 26: {
            Provider = input.ReadString();
            break;
          }
          case 34: {
            ContentId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
